#!/bin/bash
usage() {
  echo "USAGE: $0 <joinfile.ndjson> [filterOptions] [mapOptions] [-o <output_prefix>] [-d <js-data>]
    filterOptions: [-f '<js code>'|-F <filterfile.js>[,<filterfile.js>,...]]
    mapOptions:    [-m '<js code>'|-M <mapperfile.js>[,<mapperfile.js>,...]]"  1>&2

  exit 1
}

JS_FILTER_EXPRESSION='true'
JS_MAP_FUNCTION='function(d){}'
JS_DATA='{}'

while [[ -n "$@" ]]; do
  #echo "iteratate: $1; ARGS=$ARGS" 1>&2
  case "$1" in
    -o )
      OUTPUT="$2"
      shift; shift
      ;;
    -d )
      JS_DATA="$2"
      shift; shift
      ;;
    -f )
      JS_FILTER_EXPRESSION="$2"
      shift; shift
      ;;
    -F )
      JS_FILTER_EXPRESSION="$(cat $2)"
      shift; shift
      ;;
    -m )
      JS_MAP_EXPRESSION="$2"
      shift; shift
      ;;
    -M )
      JS_MAP_FUNCTION="$(cat $2)"
      shift; shift
      ;;
    -- )
      shift
      ;;
    -* )
      usage
      ;;
    * )
      ARGS="$ARGS $1"
      shift
      ;;
  esac
done

if [ -z "$JS_MAP_EXPRESSION" ]; then
  JS_MAP_EXPRESSION="($JS_MAP_FUNCTION)(d, $JS_DATA), d"
fi

eval set -- "$ARGS"
if [ -z "$1" -o -n "$2" ]; then
  usage
fi

JOINFILE=$1

#echo "JS_DATA=$JS_DATA" 1>&2
#echo "JS_FILTER_EXPRESSION=$JS_FILTER_EXPRESSION" 1>&2
#echo "JS_MAP_EXPRESSION=$JS_MAP_EXPRESSION" 1>&2

a=ro #prefix for RenderOars
SIZE=8000

set -exv

COMMENT="
TODO
categorical map with 1fa homes, schools and green space highlighted
filter: categorical map with only 1fa homes, schools and greenspace
* filter: min house br Count
* score: house location based on total distance to 3 classes of space
* score: house SIZE
* score: bathroom Count
* score: garage, porch, driveway, etc.
* choropleth: acreage [0,0.05,0.1,0.2,0.4,0.8], sqft, acreage_minus_1st_flr_sqft
* choropleth: mv$ per sqft
* choropleth: mv$ per acre
* choropleth: mv$ per bedroom

other thoughts: property acreage slider
last sale slider
zip code filter
"

if [ -z "$OUTPUT" ]; then
  cat $JOINFILE \
    | ndjson-filter "$JS_FILTER_EXPRESSION" \
    | ndjson-map -r d3 "$JS_MAP_EXPRESSION" \
    | ndjson-filter 'typeof d !== "object" || Object.keys(d).length > 0'
else
  cat $JOINFILE \
    | ndjson-filter "$JS_FILTER_EXPRESSION" \
    | ndjson-map -r d3 "$JS_MAP_EXPRESSION" \
    | ndjson-filter 'typeof d !== "object" || Object.keys(d).length > 0' \
    > $OUTPUT.ndjson

  geo2svg -n --stroke none -p 1 -w $SIZE -h $SIZE < $OUTPUT.ndjson > $OUTPUT.svg
  #TODO add optional script for updating dom to include legend https://bl.ocks.org/mbostock/4573883
  #https://medium.com/@mbostock/command-line-cartography-part-4-82d0d26df0cf
  convert -monitor $OUTPUT.svg $OUTPUT.png
fi
