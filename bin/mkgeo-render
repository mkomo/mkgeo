#!/bin/bash
usage() {
  echo "USAGE: $0 <joinfile.ndjson> [filterOptions] [mapOptions] [-d <js-data-arg>] [--crisp]
    -o <output_prefix>
    --stroke <stroke-color>

filterOptions: [-f '<js-code>'|-F <filterfile.js>[,<filterfile.js>,...]]
mapOptions:    [-m '<js-code>'|-M <mapperfile.js>[,<mapperfile.js>,...]]"  1>&2

  exit 1
}

JS_FILTER_EXPRESSION='true'
JS_MAP_FUNCTION='function(d){}'
JS_DATA='{}'
SIZE=2000
STROKE='none'

while [[ -n "$@" ]]; do
  #echo "iteratate: $1; ARGS=$ARGS" 1>&2
  case "$1" in
    -o )
      OUTPUT="$2"
      shift; shift
      ;;
    -d )
      JS_DATA="$2"
      shift; shift
      ;;
    -f )
      JS_FILTER_EXPRESSION="$2"
      shift; shift
      ;;
    -F )
      JS_FILTER_EXPRESSION="$(cat $2)"
      shift; shift
      ;;
    -m )
      JS_MAP_EXPRESSION="$2"
      shift; shift
      ;;
    -M )
      JS_MAP_FUNCTION="$(cat $2)"
      shift; shift
      ;;
    --stroke )
      STROKE="$2"
      shift; shift
      ;;
    --crisp )
      CRISP="true"
      shift
      ;;
    --size )
      SIZE=$2
      shift; shift
      ;;
    -- )
      shift
      ;;
    -* )
      usage
      ;;
    * )
      ARGS="$ARGS $1"
      shift
      ;;
  esac
done

if [ -z "$JS_MAP_EXPRESSION" ]; then
  JS_MAP_EXPRESSION="($JS_MAP_FUNCTION)(d, $JS_DATA), d"
fi

eval set -- "$ARGS"
if [ -z "$1" -o -n "$2" ]; then
  usage
fi

JOINFILE=$1

#echo "JS_DATA=$JS_DATA" 1>&2
#echo "JS_FILTER_EXPRESSION=$JS_FILTER_EXPRESSION" 1>&2
#echo "JS_MAP_EXPRESSION=$JS_MAP_EXPRESSION" 1>&2

a=ro #prefix for RenderOars

set -exv

if [ -z "$OUTPUT" ]; then
  cat $JOINFILE \
    | ndjson-filter "$JS_FILTER_EXPRESSION" \
    | ndjson-map -r d3 "$JS_MAP_EXPRESSION" \
    | ndjson-filter 'typeof d !== "object" || Object.keys(d).length > 0'
else
  cat $JOINFILE \
    | ndjson-filter "$JS_FILTER_EXPRESSION" \
    | ndjson-map -r d3 "$JS_MAP_EXPRESSION" \
    | ndjson-filter 'typeof d !== "object" || Object.keys(d).length > 0' \
    > $OUTPUT.ndjson

  geo2svg -n --stroke $STROKE -p 1 -w $SIZE -h $SIZE < $OUTPUT.ndjson > $OUTPUT.svg
  # TODO update this to allow scaling of the svg by including the current viewbox but updating the width and height
  #TODO add optional script for updating dom to include legend https://bl.ocks.org/mbostock/4573883
  #https://medium.com/@mbostock/command-line-cartography-part-4-82d0d26df0cf

  if [ -n "$CRISP" ]; then
    sed -i.bak 's|\(<svg .*\)>|\1 style="shape-rendering:crispEdges">|' $OUTPUT.svg
    rm $OUTPUT.svg.bak
  fi

  #use rsvg-convert b/c it's more performant and because it obeys the svg alias crispEdges rules
  rsvg-convert --background-color='#ffffff' $OUTPUT.svg > $OUTPUT.png
  #convert -monitor $OUTPUT.svg $OUTPUT.png

  # Sometimes color profiles are added that mess up bitmaps (data encoded in colors)
  if [ -n "$STRIP" ]; then
    convert $OUTPUT.png -strip $OUTPUT-no-profile.png
    mv $OUTPUT-no-profile.png $OUTPUT.png
  fi

  echo "Created $OUTPUT.png"
fi
